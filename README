To set up Gadgeteer:

1) If you do not already have VS 2010 (Express, Professional or Premium) run "Visual Studio Setup/vcs_web.exe"
2) Next, run "Visual Studio Setup/MicroFrameworkSDK.MSI" to install the Gadgeteer SDK
3) Next, run "Visual Studio Setup/Setup.exe" to install drivers and .dlls needed for the Spider and Seeed Modules
4) Finall, the drivers for the Cellular Radio come seperate, so run "Visual Studio Setup/CellularRadio.msi"

You can now run VS 2010 and create a new Gadgeteer Project.

It appears we can't have both a camera and USB host connected at the same time. (We can use a sd card instead)
Likewise, we can only have two of these: gyro, a cellular radio, camera, Accelerometer.

If we stick with the robot thingy, we can stil use all of these at the same time:
Power, SD Card, Camera, GPS, Display, Button, Cell Radio
And we can use the GPS to find if it's stolen I guess. Not quite as interesting for demonstrating it though.



------


Specification

Our project is to build a .NET Gadgeteer pet. 
This pet will navigate a maze by either texted directions or automatically solving the maze. 
The pet will take the form of a Rat, and will ultilise a camera to detect a maze drawn on the floor or table and use two motorised wheels and a caster wheel in the front. 


The hardware

The rat will consist of the mainboard, connected to the following components:
A camera, to see the maze.
LEDs, to illumnate the floor to make the image recognition easier.
A GSM module, to recieve directions when in the directed solving state.
A Screen, to display what instruction is currrently being run, and more information.
A Button to indicate a reset.
Relays, to run the motors to the wheels.

The software

We will develop one central model for the rat. 
This will be responsible for storing the current mode of the rat (SMS Instruction Mode or Auto Solve Mode).
The model will be reposnible for reseting the rats state. 
It will store the phone numbers of the current controller and the phones that are allowed to send reset commands.

The other components will be:
GSM Controller, recieves texts and parses them into instructions, passes these to the model.
Camera Controller, recieves bitmaps and proccess them to see if the walls or start/end tokens are visible.
Screen, takes the current command and shows it on the scren.
Motor Controller, takes the current command, runs the motors in order to carry it out. It also listens to the gyro in order to decie what angle it has turned through.
Map Memory Class, builds an internal representation of the external maze, and uses this to either provide a solution or issue instructions to the State that will help explore the physical maze and attempt to solve it.
Timer Class, keeps a leaderboard of who has solved the maze the fastest and such.


